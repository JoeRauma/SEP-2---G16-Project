
// Contains uniquely identifying information about a user, e.g. an id-number.
type UserID {
    ...
}


// An interest or hobby of an user.
//
// Implementation details are not important here, other than that you can compare their equality and inequality.
type Interest {
    ...
}


// A pair of users formed by the matching algorithm.
type Match {
    UserID user_1
    UserID user_2
    UserID user_3  // an optional third user for when the amount of users is odd
    ...  // other relevant data for other parts of the software, such as the specific interest
}


// The function implementing the matching algorithm.
//
// As it's inputs it gets a map from users to their interests, the reverse of that, a map from interests to their users, and also the previous list of formed matches.
// This returns the new list of formed matches, which doesn't contain repeats from the old list.

Set<Match> form_matches
    (
        Map<UserID, Set<Interest>> users_to_interests,
        Map<Interest, Set<UserID>> interests_to_users,
        Set<Match> old_matches,
    )
{
    Set<Match> potential_matches
    
    // Create a randomized list of potential matches
    for users in interests_to_users.values() {
        users.shuffle()  // shuffle the list of users randomly
        
        // split the list into pairs of potential matches
        // (range end should be exclusive and indexing is zero-based)
        for i in 0..floor(users.len() / 2) {
            Match potential_match = new Match(users[2*i], users[2*i + 1], ...)
            potential_matches.insert(potential_match)
        }
    }
    
    // Filter out matches that were the same previous time
    potential_matches = potential_matches.exclude(old_matches)
    potential_matches.shuffle()
    
    Set<Match> matches  // the new list of matches
    Set<UserID> not_yet_matched_users = users_to_interests.keys()  // users that have not yet been matched
    
    // Select matches from the potential ones
    for match in potential_matches {
        if match.user_1 and match.user_2 are in not_yet_matched_users {
            // select this match
            matches.insert(match)
            not_yet_matched_users.remove(match.user_1)
            not_yet_matched_users.remove(match.user_2)
        }
    }
    
    // the users that couldn't be matched at all
    Set<UserID> unmatchable_users = not_yet_matched_users
    
    // Go through the users that were unable to be matched and match them with each other.
    // This part is unfortunately at least O(nÂ²) so if there ends up being a lot of unmatched people, a different approach is needed.
    for i in 0..not_yet_matched_users.len()-1 {
        user_1 = not_yet_matched_users[i]
        user_1_interests = users_to_interests[user_1]
        
        for j in i+1..not_yet_matched_users.len() {
            user_2 = not_yet_matched_users[j]
            user_2_interests = users_to_interests[user_2]
            
            if user_1_interests intersects with user_2_interests {
                matches.insert(new Match(user_1, user_2, ...))
                unmatchable_users.remove(user_1)
                unmatchable_users.remove(user_2)
            }
        }
    }
    
    (Store every user who couldn't be matched in `unmatchable_users` so you could do something like sending them messages about it and telling them to add more interests or something, or just match them without caring about their interests)
    (As a special case if the number of users is odd, you might want to form a group of 3)
    
    return matches
}

